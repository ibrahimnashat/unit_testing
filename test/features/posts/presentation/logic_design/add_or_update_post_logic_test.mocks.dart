// Mocks generated by Mockito 5.3.2 from annotations
// in unit_testing/test/features/posts/presentation/logic_design/add_or_update_post_logic_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i14;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter/foundation.dart' as _i6;
import 'package:flutter/rendering.dart' as _i4;
import 'package:flutter/services.dart' as _i5;
import 'package:flutter/src/widgets/editable_text.dart' as _i12;
import 'package:flutter/src/widgets/framework.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:unit_testing/core/errors/failures.dart' as _i9;
import 'package:unit_testing/features/posts/domain/entities/post.dart' as _i10;
import 'package:unit_testing/features/posts/domain/repository/posts_repository.dart'
    as _i2;
import 'package:unit_testing/features/posts/domain/usecases/add_post.dart'
    as _i7;
import 'package:unit_testing/features/posts/domain/usecases/update_post.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePostsRepositroy_0 extends _i1.SmartFake
    implements _i2.PostsRepositroy {
  _FakePostsRepositroy_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextSelection_2 extends _i1.SmartFake implements _i4.TextSelection {
  _FakeTextSelection_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextEditingValue_3 extends _i1.SmartFake
    implements _i5.TextEditingValue {
  _FakeTextEditingValue_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextSpan_4 extends _i1.SmartFake implements _i4.TextSpan {
  _FakeTextSpan_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [AddPost].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddPost extends _i1.Mock implements _i7.AddPost {
  @override
  _i2.PostsRepositroy get postsRepositroy => (super.noSuchMethod(
        Invocation.getter(#postsRepositroy),
        returnValue: _FakePostsRepositroy_0(
          this,
          Invocation.getter(#postsRepositroy),
        ),
        returnValueForMissingStub: _FakePostsRepositroy_0(
          this,
          Invocation.getter(#postsRepositroy),
        ),
      ) as _i2.PostsRepositroy);
  @override
  _i8.Future<_i3.Either<_i9.Failure, _i3.Unit>> addPost(
          {required _i10.Post? post}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPost,
          [],
          {#post: post},
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i9.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #addPost,
            [],
            {#post: post},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, _i3.Unit>>.value(
                _FakeEither_1<_i9.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #addPost,
            [],
            {#post: post},
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, _i3.Unit>>);
}

/// A class which mocks [UpdatePost].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdatePost extends _i1.Mock implements _i11.UpdatePost {
  @override
  _i2.PostsRepositroy get postsRepositroy => (super.noSuchMethod(
        Invocation.getter(#postsRepositroy),
        returnValue: _FakePostsRepositroy_0(
          this,
          Invocation.getter(#postsRepositroy),
        ),
        returnValueForMissingStub: _FakePostsRepositroy_0(
          this,
          Invocation.getter(#postsRepositroy),
        ),
      ) as _i2.PostsRepositroy);
  @override
  _i8.Future<_i3.Either<_i9.Failure, _i3.Unit>> updatePost(
          {required _i10.Post? post}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePost,
          [],
          {#post: post},
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i9.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #updatePost,
            [],
            {#post: post},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, _i3.Unit>>.value(
                _FakeEither_1<_i9.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #updatePost,
            [],
            {#post: post},
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, _i3.Unit>>);
}

/// A class which mocks [TextEditingController].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextEditingController extends _i1.Mock
    implements _i12.TextEditingController {
  @override
  String get text => (super.noSuchMethod(
        Invocation.getter(#text),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set text(String? newText) => super.noSuchMethod(
        Invocation.setter(
          #text,
          newText,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set value(_i5.TextEditingValue? newValue) => super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.TextSelection get selection => (super.noSuchMethod(
        Invocation.getter(#selection),
        returnValue: _FakeTextSelection_2(
          this,
          Invocation.getter(#selection),
        ),
        returnValueForMissingStub: _FakeTextSelection_2(
          this,
          Invocation.getter(#selection),
        ),
      ) as _i4.TextSelection);
  @override
  set selection(_i4.TextSelection? newSelection) => super.noSuchMethod(
        Invocation.setter(
          #selection,
          newSelection,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.TextEditingValue get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _FakeTextEditingValue_3(
          this,
          Invocation.getter(#value),
        ),
        returnValueForMissingStub: _FakeTextEditingValue_3(
          this,
          Invocation.getter(#value),
        ),
      ) as _i5.TextEditingValue);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.TextSpan buildTextSpan({
    required _i13.BuildContext? context,
    _i4.TextStyle? style,
    required bool? withComposing,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildTextSpan,
          [],
          {
            #context: context,
            #style: style,
            #withComposing: withComposing,
          },
        ),
        returnValue: _FakeTextSpan_4(
          this,
          Invocation.method(
            #buildTextSpan,
            [],
            {
              #context: context,
              #style: style,
              #withComposing: withComposing,
            },
          ),
        ),
        returnValueForMissingStub: _FakeTextSpan_4(
          this,
          Invocation.method(
            #buildTextSpan,
            [],
            {
              #context: context,
              #style: style,
              #withComposing: withComposing,
            },
          ),
        ),
      ) as _i4.TextSpan);
  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void clearComposing() => super.noSuchMethod(
        Invocation.method(
          #clearComposing,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isSelectionWithinTextBounds(_i4.TextSelection? selection) =>
      (super.noSuchMethod(
        Invocation.method(
          #isSelectionWithinTextBounds,
          [selection],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void addListener(_i14.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i14.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
