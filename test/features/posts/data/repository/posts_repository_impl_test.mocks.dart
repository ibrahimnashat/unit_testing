// Mocks generated by Mockito 5.3.2 from annotations
// in unit_testing/test/features/posts/data/repository/posts_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:unit_testing/core/errors/failures.dart' as _i8;
import 'package:unit_testing/core/framework/network.dart' as _i4;
import 'package:unit_testing/features/posts/data/data_sources/posts_local_data_source.dart'
    as _i3;
import 'package:unit_testing/features/posts/data/data_sources/posts_remote_data_source.dart'
    as _i2;
import 'package:unit_testing/features/posts/data/repository/posts_repository_impl.dart'
    as _i6;
import 'package:unit_testing/features/posts/domain/entities/post.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePostsRemoteDataSource_0 extends _i1.SmartFake
    implements _i2.PostsRemoteDataSource {
  _FakePostsRemoteDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostsLocalDataSource_1 extends _i1.SmartFake
    implements _i3.PostsLocalDataSource {
  _FakePostsLocalDataSource_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetwork_2 extends _i1.SmartFake implements _i4.Network {
  _FakeNetwork_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_3<L, R> extends _i1.SmartFake implements _i5.Either<L, R> {
  _FakeEither_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostsRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostsRepositoryImpl extends _i1.Mock
    implements _i6.PostsRepositoryImpl {
  @override
  _i2.PostsRemoteDataSource get remoteDataSource => (super.noSuchMethod(
        Invocation.getter(#remoteDataSource),
        returnValue: _FakePostsRemoteDataSource_0(
          this,
          Invocation.getter(#remoteDataSource),
        ),
        returnValueForMissingStub: _FakePostsRemoteDataSource_0(
          this,
          Invocation.getter(#remoteDataSource),
        ),
      ) as _i2.PostsRemoteDataSource);
  @override
  _i3.PostsLocalDataSource get localDataSource => (super.noSuchMethod(
        Invocation.getter(#localDataSource),
        returnValue: _FakePostsLocalDataSource_1(
          this,
          Invocation.getter(#localDataSource),
        ),
        returnValueForMissingStub: _FakePostsLocalDataSource_1(
          this,
          Invocation.getter(#localDataSource),
        ),
      ) as _i3.PostsLocalDataSource);
  @override
  _i4.Network get network => (super.noSuchMethod(
        Invocation.getter(#network),
        returnValue: _FakeNetwork_2(
          this,
          Invocation.getter(#network),
        ),
        returnValueForMissingStub: _FakeNetwork_2(
          this,
          Invocation.getter(#network),
        ),
      ) as _i4.Network);
  @override
  _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>> addPost(
          {required _i9.Post? post}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPost,
          [],
          {#post: post},
        ),
        returnValue: _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>>.value(
            _FakeEither_3<_i8.Failure, _i5.Unit>(
          this,
          Invocation.method(
            #addPost,
            [],
            {#post: post},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>>.value(
                _FakeEither_3<_i8.Failure, _i5.Unit>(
          this,
          Invocation.method(
            #addPost,
            [],
            {#post: post},
          ),
        )),
      ) as _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>>);
  @override
  _i7.Future<_i5.Either<_i8.Failure, List<_i9.Post>>> getPosts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [],
        ),
        returnValue: _i7.Future<_i5.Either<_i8.Failure, List<_i9.Post>>>.value(
            _FakeEither_3<_i8.Failure, List<_i9.Post>>(
          this,
          Invocation.method(
            #getPosts,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.Either<_i8.Failure, List<_i9.Post>>>.value(
                _FakeEither_3<_i8.Failure, List<_i9.Post>>(
          this,
          Invocation.method(
            #getPosts,
            [],
          ),
        )),
      ) as _i7.Future<_i5.Either<_i8.Failure, List<_i9.Post>>>);
  @override
  _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>> updatePost(
          {required _i9.Post? post}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePost,
          [],
          {#post: post},
        ),
        returnValue: _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>>.value(
            _FakeEither_3<_i8.Failure, _i5.Unit>(
          this,
          Invocation.method(
            #updatePost,
            [],
            {#post: post},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>>.value(
                _FakeEither_3<_i8.Failure, _i5.Unit>(
          this,
          Invocation.method(
            #updatePost,
            [],
            {#post: post},
          ),
        )),
      ) as _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>>);
  @override
  _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>> deletePost(
          {required int? postId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletePost,
          [],
          {#postId: postId},
        ),
        returnValue: _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>>.value(
            _FakeEither_3<_i8.Failure, _i5.Unit>(
          this,
          Invocation.method(
            #deletePost,
            [],
            {#postId: postId},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>>.value(
                _FakeEither_3<_i8.Failure, _i5.Unit>(
          this,
          Invocation.method(
            #deletePost,
            [],
            {#postId: postId},
          ),
        )),
      ) as _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>>);
  @override
  _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>> deleteOrEditOrUpdate(
          {required Function? request}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteOrEditOrUpdate,
          [],
          {#request: request},
        ),
        returnValue: _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>>.value(
            _FakeEither_3<_i8.Failure, _i5.Unit>(
          this,
          Invocation.method(
            #deleteOrEditOrUpdate,
            [],
            {#request: request},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>>.value(
                _FakeEither_3<_i8.Failure, _i5.Unit>(
          this,
          Invocation.method(
            #deleteOrEditOrUpdate,
            [],
            {#request: request},
          ),
        )),
      ) as _i7.Future<_i5.Either<_i8.Failure, _i5.Unit>>);
}
