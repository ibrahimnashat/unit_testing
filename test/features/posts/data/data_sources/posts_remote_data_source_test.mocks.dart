// Mocks generated by Mockito 5.3.2 from annotations
// in unit_testing/test/features/posts/data/data_sources/posts_remote_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:unit_testing/features/posts/data/data_sources/posts_remote_data_source.dart'
    as _i3;
import 'package:unit_testing/features/posts/data/models/post_model.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUnit_0 extends _i1.SmartFake implements _i2.Unit {
  _FakeUnit_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostsRemoteDataSource extends _i1.Mock
    implements _i3.PostsRemoteDataSource {
  @override
  _i4.Future<_i2.Unit> addPost({required _i5.PostModel? post}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPost,
          [],
          {#post: post},
        ),
        returnValue: _i4.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #addPost,
            [],
            {#post: post},
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #addPost,
            [],
            {#post: post},
          ),
        )),
      ) as _i4.Future<_i2.Unit>);
  @override
  _i4.Future<List<_i5.PostModel>> getPosts() => (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [],
        ),
        returnValue: _i4.Future<List<_i5.PostModel>>.value(<_i5.PostModel>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.PostModel>>.value(<_i5.PostModel>[]),
      ) as _i4.Future<List<_i5.PostModel>>);
  @override
  _i4.Future<_i2.Unit> updatePost({required _i5.PostModel? post}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePost,
          [],
          {#post: post},
        ),
        returnValue: _i4.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #updatePost,
            [],
            {#post: post},
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #updatePost,
            [],
            {#post: post},
          ),
        )),
      ) as _i4.Future<_i2.Unit>);
  @override
  _i4.Future<_i2.Unit> deletePost({required int? postId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletePost,
          [],
          {#postId: postId},
        ),
        returnValue: _i4.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #deletePost,
            [],
            {#postId: postId},
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #deletePost,
            [],
            {#postId: postId},
          ),
        )),
      ) as _i4.Future<_i2.Unit>);
}
